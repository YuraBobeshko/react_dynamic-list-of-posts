{"version":3,"sources":["Content.js","load.js","loadConnect.js","List.js","App.js","index.js"],"names":["Content","props","list","posts","isLoaded","react_default","a","createElement","value","filter","post","user","name","toLowerCase","includes","trim","title","body","map","comments","className","key","id","email","address","city","street","comment","_callee","url","response","items","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","load","commentsUrl","postsUrl","usersUrl","users","_objectSpread","find","userId","postId","loadConnect","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loads","bind","assertThisInitialized","filterName","setState","event","target","_this2","Fragment","type","onChange","hidden","onClick","src_Content","React","Component","App","src_List","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.adf15c19.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Content(props) {\n  const list = props.list;\n  let posts = props.list.posts;\n\n  if(list.isLoaded && posts === null) {\n    return <p>...loading</p>\n  } else if (!list.isLoaded && posts === null) {\n    return null;\n  } else if (list.isLoaded && posts !== null) {\n    if(props.list.value !== '') {\n      posts = posts.filter(\n        post =>\n          post.user.name\n            .toLowerCase()\n            .includes(\n              props.list.value.trim().toLowerCase()\n            ) ||\n            post.title\n            .toLowerCase()\n            .includes(\n              props.list.value.trim().toLowerCase()\n            ) ||\n            post.body\n            .toLowerCase()\n            .includes(\n              props.list.value.trim().toLowerCase()\n            )\n      );\n    }\n    return posts.map(post => {\n      const user = post.user;\n      const comments = post.comments;\n      return (\n        <div className={\"content\"} key={post.id}>\n          <div>\n            <p>Name: {user.name}</p>\n            <p>email: {user.email}</p>\n            <p>\n              address: {user.address.city} {user.address.street}\n            </p>\n          </div>\n          <div>\n            <p>{post.title}</p>\n            <p>{post.body}</p>\n          </div>\n          <div>\n            <ul>\n              {comments.map(comment => (\n                <li key={comment.id}>{comment.body}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      );\n    });\n  }\n}\n\nexport default Content;\n","\nasync function load (url) {\n  const response = await fetch(url);\n  const items = await response.json();\n  return items;\n}\n\nexport default load;\n","import load from './load';\n\nasync function loadConnect(commentsUrl, postsUrl, usersUrl) {\n  const comments = await load(commentsUrl);\n  const posts = await load(postsUrl);\n  const users = await load(usersUrl);\n  return posts.map(post =>{\n    return {\n      ...post,\n      user: users.find(user => user.id === post.userId),\n      comments: comments.filter(comment => post.id === comment.postId),\n      title: post.title === null ? '' : post.title,\n      body: post.body === null ? '' : post.body,\n    }\n  })\n}\n\nexport default loadConnect;\n","import React from 'react';\n\nimport Content from './Content';\nimport loadConnect from './loadConnect';\n\nclass List extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      posts: null,\n      isLoaded: false,\n      value: '',\n    };\n\n    this.loads = this.loads.bind(this);\n    this.filterName = this.filterName.bind(this);\n  }\n\n  async loads() {\n    this.setState({\n      isLoaded: true\n    });\n    let posts = await loadConnect('https://jsonplaceholder.typicode.com/comments',\n      'https://jsonplaceholder.typicode.com/posts',\n      'https://jsonplaceholder.typicode.com/users');\n    this.setState({\n      posts,\n    });\n  }\n\n  filterName (event) {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <>\n        <input\n          type={\"text\"}\n          value={value}\n          onChange={this.filterName}\n          hidden={this.state.posts === null}\n        ></input>\n        <button hidden={this.state.isLoaded} onClick={() => this.loads()}>\n          Load\n        </button>\n        <p hidden={this.state.isLoaded}>not loaded</p>\n        <Content list={this.state} />\n      </>\n    );\n  }\n}\n\nexport default List;\n","import React from 'react';\nimport './App.css';\n\nimport List from './List';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}